{
	"name": "DATAFLOW_ARTISTA",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_generic_delimited_text_2",
						"type": "DatasetReference"
					},
					"name": "artista"
				},
				{
					"dataset": {
						"referenceName": "ds_generic_delimited_text_2",
						"type": "DatasetReference"
					},
					"name": "eventoartista"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_generic_azuresql",
						"type": "DatasetReference"
					},
					"name": "saidatablesql"
				},
				{
					"dataset": {
						"referenceName": "ds_generic_parquet_dataflow",
						"type": "DatasetReference"
					},
					"name": "saidaparquet"
				}
			],
			"transformations": [
				{
					"name": "renomearcolunas"
				},
				{
					"name": "renomearcolunasea"
				},
				{
					"name": "colunacalculada"
				},
				{
					"name": "joinartistaea"
				},
				{
					"name": "agrupamentoartista"
				},
				{
					"name": "condicao"
				}
			],
			"scriptLines": [
				"source(output(",
				"          COD_ARTISTA as short,",
				"          CPF as long,",
				"          NOME as string,",
				"          COD_ESTILO as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> artista",
				"source(output(",
				"          CODIGO as short,",
				"          VALOR_PGTO as double,",
				"          DT_PGTO as string,",
				"          FKCOD_ARTISTA as short,",
				"          FKCOD_EVENTO as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> eventoartista",
				"artista select(mapColumn(",
				"          COD_ARTISTA,",
				"          NOME,",
				"          COD_ESTILO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renomearcolunas",
				"eventoartista select(mapColumn(",
				"          EA_CODIGO = CODIGO,",
				"          EA_VALOR_PGTO = VALOR_PGTO,",
				"          EA_DT_PGTO = DT_PGTO,",
				"          EA_FKCOD_ARTISTA = FKCOD_ARTISTA,",
				"          EA_FKCOD_EVENTO = FKCOD_EVENTO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renomearcolunasea",
				"renomearcolunasea derive(valor_x_codigo = EA_CODIGO*EA_VALOR_PGTO) ~> colunacalculada",
				"renomearcolunas, colunacalculada join(COD_ARTISTA == EA_FKCOD_ARTISTA,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinartistaea",
				"joinartistaea aggregate(groupBy(NOME),",
				"     faturamento_total = sum(EA_VALOR_PGTO)) ~> agrupamentoartista",
				"agrupamentoartista split(faturamento_total > 100000,",
				"     disjoint: false) ~> condicao@(saidatablesql, saidaparquet)",
				"condicao@saidatablesql sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> saidatablesql",
				"condicao@saidaparquet sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['tb_faturamento_negativo.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> saidaparquet"
			]
		}
	}
}